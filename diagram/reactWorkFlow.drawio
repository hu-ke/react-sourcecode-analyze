<mxfile host="app.diagrams.net" modified="2023-08-11T03:52:50.371Z" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" etag="wR1SzK2_kTe5FGQHkPpn" version="21.6.8" type="github">
  <diagram name="Page-1" id="yT4P8Us_n6Z18nM-jOkr">
    <mxGraphModel dx="2393" dy="920" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-8" value="" style="group" vertex="1" connectable="0" parent="1">
          <mxGeometry x="-440" y="210" width="430" height="150" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-1" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="5RRUOqjZ2mIEOi2oh4Kx-8">
          <mxGeometry width="430" height="150" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-2" value="import React from &#39;react&#39;;&lt;br&gt;import ReactDOM from &#39;react-dom/client&#39;;&lt;br&gt;import App from &#39;./App&#39;;&lt;p style=&quot;margin: 0px; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-stretch: normal; font-size: 13px; line-height: normal; font-family: &amp;quot;Helvetica Neue&amp;quot;; min-height: 15px;&quot; class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;const root = ReactDOM.createRoot(document.getElementById(&#39;root&#39;));&lt;br&gt;root.render(&lt;br&gt;&amp;nbsp; &amp;lt;App /&amp;gt;&lt;br&gt;);&lt;p style=&quot;margin: 0px; font-variant-numeric: normal; font-variant-east-asian: normal; font-variant-alternates: normal; font-kerning: auto; font-optical-sizing: auto; font-feature-settings: normal; font-variation-settings: normal; font-stretch: normal; font-size: 13px; line-height: normal; font-family: &amp;quot;Helvetica Neue&amp;quot;; min-height: 15px;&quot; class=&quot;p2&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="5RRUOqjZ2mIEOi2oh4Kx-8">
          <mxGeometry x="10" y="10" width="390" height="140" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-9" value="" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;" vertex="1" parent="1">
          <mxGeometry x="100" y="140" width="609" height="480" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-10" value="ReactDOMRoot" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=1" vertex="1" parent="1">
          <mxGeometry x="230" y="100" width="120" height="30" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-12" value="export function createRoot(container, options) {&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;...&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;const root = createContainer(container, ...)&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;...&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;border-color: var(--border-color);&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;return new ReactDOMRoot(root)&lt;/span&gt;&lt;br style=&quot;border-color: var(--border-color);&quot;&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;function ReactDOMRoot(internalRoot) {&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;this._internalRoot = internalRoot&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;}&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;...&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const root = this._internalRoot&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;updateContainer(children, root, null, null);&lt;/div&gt;&lt;div style=&quot;&quot;&gt;}&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="110" y="150" width="590" height="460" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-3" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="790" y="140" width="710" height="500" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-4" value="export function createContainer(containerInfo: Container, ...) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;return createFiberRoot(&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;c&lt;/span&gt;ontainerInfo,&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;)&lt;br&gt;}&lt;br&gt;&lt;br&gt;export function updateContainer(element, container, parentComponent, callback) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const current = container.current&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const lane = requesrUpdateLane(current)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const update = createUpdate(lane)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;update.payload = {element}&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const root = enqueueUpdate(current, update, lane)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;if (root !== null) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;scheduleUpdateOnFiber(root, current, lane)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;.&lt;/span&gt;..&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;}&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;return lane&lt;br&gt;}" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="800" y="150" width="690" height="470" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-5" value="ReactFiberReconciler" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=1" vertex="1" parent="1">
          <mxGeometry x="790" y="110" width="130" height="30" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-13" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1610" y="140" width="850" height="500" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-14" value="ReactFiberWorkLoop" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=1" vertex="1" parent="1">
          <mxGeometry x="1610" y="110" width="150" height="30" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-15" value="let workInProgressRoot: Fiber | null = null&lt;br&gt;export function scheduleUpdateOnFiber(root: FiberRoor, fiber: Fiber, lane, eventTime) {&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;e&lt;/span&gt;nsureRootIsScheduled(root, eventTime)&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;export function performConcurrentWorkOnRoot(root, didTimeout) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;const shouldTimeSlice = !includesBlockingLane(root, lanes) &amp;amp;&amp;amp; !includesExpiredLane(root, lanes) &amp;amp;&amp;amp; (disableSchedulerTimeoutInWorkLoop || !didTimeout)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;let exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes)&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;}" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1621" y="150" width="830" height="470" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-16" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1600" y="990" width="840" height="420" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-18" value="ReactFiberRootScheduler" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=1" vertex="1" parent="1">
          <mxGeometry x="1600" y="960" width="150" height="30" as="geometry" />
        </mxCell>
        <mxCell id="5RRUOqjZ2mIEOi2oh4Kx-19" value="&lt;br&gt;function ensureRootIsScheduled(root, currentTime) {&lt;br&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;...&lt;br&gt;&lt;span style=&quot;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;scheduleCallback$1(schedulePriorityLevel, performConcurrentWorkOnRoot.bind(null, root))&lt;br&gt;}&lt;br&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="1610" y="1000" width="820" height="370" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
